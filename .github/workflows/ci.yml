name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Adjust as necessary

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Unit Tests
        run: pytest -s -m unittest --cov=app --cov-append --cov-report=xml --cov-report=term
      - name: Run Integration Tests
        run: pytest -s -m integrationtest --cov=app --cov-append --cov-report=xml --cov-report=term
        continue-on-error: false # Ensures the job fails if tests fail

      - name: Generate Test Report
        run: |
          mkdir -p test-reports
          pytest tests/unit --cov=app --cov-report=xml > test-reports/unit-test-report.xml
          pytest tests/integration --cov=app --cov-append --cov-report=xml > test-reports/integration-test-report.xml

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: test-reports/

  comment:
    needs: test
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Test Reports
        uses: actions/download-artifact@v2
        with:
          name: test-reports
          path: test-reports/

      - name: Install dependencies for report processing
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov lxml

      - name: Post Comment with Test Results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
import xml.etree.ElementTree as ET

def parse_report(file_path):
    tree = ET.parse(file_path)
    root = tree.getroot()
    tests = root.attrib['tests']
    failures = root.attrib['failures']
    errors = root.attrib['errors']
    return f'Tests: {tests}, Failures: {failures}, Errors: {errors}'

unit_results = parse_report('test-reports/unit-test-report.xml')
integration_results = parse_report('test-reports/integration-test-report.xml')
e2e_results = parse_report('test-reports/e2e-test-report.xml')

comment_body = f'### Unit Test Results:\\n`{unit_results}`\\n\\n### Integration Test Results:\\n`{integration_results}`\\n\\n### End-to-End Test Results:\\n`{e2e_results}`'

import requests
url = f'https://api.github.com/repos/${{GITHUB_REPOSITORY}}/issues/${{GITHUB_PULL_REQUEST}}/comments'
headers = {'Authorization': f'token ${{GITHUB_TOKEN}}', 'Content-Type': 'application/json'}
data = {'body': comment_body}
response = requests.post(url, headers=headers, json=data)
response.raise_for_status()
"
